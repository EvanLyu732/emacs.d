#+TITLE: Evan's Config Org File
#+AUTHOR: Evan Lyu
#+auto_tangle: t
#+DESCRIPTION: Evan's Config Org File
#+STARTUP: showeverything
#+OPTIONS: tocs:3

* Table Of Content :TOC_3:
- [[#basic-setting][Basic Setting]]
  - [[#basic-config][Basic Config]]
  - [[#chinese-input][Chinese Input]]
  - [[#font][Font]]
  - [[#zoom-inout][Zoom In/Out]]
- [[#custom-function][Custom Function]]
- [[#packages][Packages]]
  - [[#using-emacs-china-package-source][Using Emacs China Package Source]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#evil-mode][Evil Mode]]
  - [[#theme][Theme]]
    - [[#doom-theme][Doom Theme]]
  - [[#org-package][Org Package]]
    - [[#org-mode-basic-settings][Org Mode Basic Settings]]
    - [[#tables-of-contents][Tables Of Contents]]
    - [[#org-bullet][Org Bullet]]
    - [[#org-tempo][Org Tempo]]
    - [[#org-auto-tangle][Org Auto Tangle]]
    - [[#org-roam][Org Roam]]
  - [[#general-config][General Config]]
  - [[#focus-mode][Focus Mode]]
    - [[#focus][Focus]]
    - [[#dimmer][Dimmer]]
    - [[#darkroom][DarkRoom]]
  - [[#indentation][Indentation]]
    - [[#aggressive-indent][aggressive-indent]]
  - [[#magit][Magit]]
  - [[#rainbow-bracket][Rainbow-Bracket]]
  - [[#rainbow-delimters][Rainbow-Delimters]]
  - [[#highlight-todo][Highlight-TODO]]
  - [[#icons][Icons]]
  - [[#treemacs][TreeMacs]]
  - [[#bughunter][BugHunter]]
  - [[#modeline][Modeline]]
  - [[#which-key][Which Key]]
  - [[#dashboard][Dashboard]]
  - [[#minibuffer][Minibuffer]]
    - [[#vertico][Vertico]]
    - [[#marginalia][MARGINALIA]]
  - [[#fly-check][Fly Check]]
  - [[#completion][Completion]]
    - [[#coruf][Coruf]]
  - [[#development][Development]]
    - [[#eglot][Eglot]]
    - [[#cpp][Cpp]]
    - [[#common-lisp][Common Lisp]]
    - [[#shell][Shell]]
    - [[#debug][Debug]]
  - [[#eaf][EAF]]
  - [[#terminal][Terminal]]
    - [[#vterm][VTerm]]
  - [[#window-manager][Window Manager]]
    - [[#exwm][EXWM]]

* Basic Setting 

First of all, remap <Ctrl> to <CapsLock> manuall.
  
** Basic Config
#+begin_src emacs-lisp
(setq inhibit-startup-message t)

;; disable tool bar menu bar scroll bar
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)

;; highlight current line
(global-hl-line-mode t)

;; show line number
(line-number-mode t)

;; auto refresh when configure is updated
(global-auto-revert-mode t)

;; line number mode
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)

;; backup files
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))

#+end_src

** Chinese Input

#+begin_src emacs-lisp

#+end_src

** Font

#+begin_src emacs-lisp
(set-face-attribute 'default nil
		    :font "JetBrainsMono Nerd Font"
		    :height 110
		    :weight 'medium)
(set-face-attribute 'variable-pitch nil
		    :font "Ubuntu"
		    :height 120
		    :weight 'medium)
(set-face-attribute 'fixed-pitch nil
		    :font "JetBrainsMono Nerd Font"
		    :height 110
		    :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
		    :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
		    :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrainsMono Nerd Font"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src

** Zoom In/Out
  
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

#+end_src

* Custom Function
  
#+begin_src emacs-lisp
;; reload configuration
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file)
  )
#+end_src


* Packages
  
** Using Emacs China Package Source 
#+begin_src emacs-lisp
(setq package-archives '(("gnu"   . "http://1.15.88.122/gnu/")
			 ("melpa" . "http://1.15.88.122/melpa/")))
#+end_src
   


** Elpaca Package Manager
#+BEGIN_SRC emacs-lisp
(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                 ,@(when-let ((depth (plist-get order :depth)))
                                                     (list (format "--depth=%d" depth) "--no-single-branch"))
                                                 ,(plist-get order :repo) ,repo))))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Install a package via the elpaca macro
;; See the "recipes" section of the manual for more details.

;; (elpaca example-package)

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable use-package :ensure support for Elpaca.
  (elpaca-use-package-mode))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :ensure t :demand t)
;;(elpaca-wait)

;;Turns off elpaca-use-package-mode current declaration
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
;;(use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
;;(elpaca nil (message "deferred"))
#+END_SRC

** Evil Mode

#+BEGIN_SRC emacs-lisp
;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil 
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)

  (setq evil-split-window-below t)
  :ensure t
  :demand nil
  :config
  (evil-mode)
  (setq x-select-enable-clipboard nil)
  )
(use-package evil-collection
  :after evil
  :ensure t
  :demand nil 
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))

(use-package evil-commentary
  :after evil
  :ensure t
  :demand nil 
  :config
  (evil-commentary-mode))

(use-package evil-surround
  :after evil
  :ensure t
  :demand nil 
  :config
  (global-evil-surround-mode))

(elpaca-wait)
#+END_SRC

** Theme

*** Doom Theme 
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-molokai t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

#+END_SRC

   
** Org Package

*** Org Mode Basic Settings
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-directory "~/Org/"
      org-agenda-files '("~/Org/agenda.org")
      org-default-notes-file (expand-file-name "notes.org" org-directory)
      org-ellipsis " â–¼ "
      org-log-done 'time
      org-journal-dir "~/Org/journal/"
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org"
      org-hide-emphasis-markers t)
(setq org-src-preserve-indentation nil
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0
      org-src-fontify-natively t
      org-confirm-babel-evaluate nil)
#+end_src

*** Tables Of Contents
#+begin_src emacs-lisp
(use-package toc-org
  :ensure t
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src
   
*** Org Bullet
#+begin_src emacs-lisp
(use-package org-bullets :ensure t :config 
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** Org Tempo
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src


*** Org Auto Tangle

#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

*** Org Roam

org roam for note-taking
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "~/Org/"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today))
  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))
#+end_src
   

** General Config

#+begin_src emacs-lisp
(use-package general
  :ensure t
  :config
  (general-evil-setup)
  
  ;; set up 'SPC' as the global leader key
  (general-create-definer leader-key
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (leader-key
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b b" '(switch-to-buffer :wk "Switch to buffer")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b d" '(bookmark-delete :wk "Delete bookmark")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-current-buffer :wk "Kill current buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple buffers")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmark-set :wk "Set bookmark")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b R" '(rename-buffer :wk "Rename buffer")
    "b s" '(basic-save-buffer :wk "Save buffer")
    "b S" '(save-some-buffers :wk "Save multiple buffers")
    )

  (leader-key
    "e" '(treemacs :wk "Open TreeMacs")
    )

  (leader-key
    "z" '(darkroom-mode :wk "Zen Mode")
    )
  )
#+end_src


** Focus Mode

*** Focus 

#+begin_src emacs-lisp
(use-package focus :ensure t)
#+end_src

*** Dimmer

#+begin_src emacs-lisp
(use-package dimmer :ensure t :config 
  (dimmer-configure-which-key)
  (dimmer-configure-helm)
  (dimmer-mode t))
#+end_src

*** DarkRoom

DarkRoom for Zen Mode

#+begin_src emacs-lisp
(use-package darkroom :ensure t)
#+end_src

** Indentation

*** aggressive-indent

#+begin_src emacs-lisp
(use-package aggressive-indent
  :ensure t
  :config
  ;;(add-to-list 'aggressive-indent-excluded-modes 'html-mode)
  (global-aggressive-indent-mode 1)

  )
#+end_src


** Magit
#+begin_src emacs-lisp
(use-package transient :ensure t)
(use-package magit :ensure t :after transient)
#+end_src

** Rainbow-Bracket
#+begin_src emacs-lisp
(use-package rainbow-mode :ensure t :hook org-mode prog-mode)
#+end_src

** Rainbow-Delimters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook ((org-mode . rainbow-delimiters-mode)
	 (prog-mode . rainbow-delimiters-mode)))

#+end_src


** Highlight-TODO
#+begin_src emacs-lisp
(use-package hl-todo
  :ensure t
  :hook ((org-mode . hl-todo-mode)
	 (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
	hl-todo-keyword-faces
	`(("TODO"       warning bold)
	  ("FIXME"      error bold)
	  ("HACK"       font-lock-constant-face bold)
	  ("REVIEW"     font-lock-keyword-face bold)
	  ("NOTE"       success bold)
	  ("DEPRECATED" font-lock-doc-face bold))))
#+end_src


** Icons

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :ensure t
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src


** TreeMacs
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t)

(use-package treemacs-icons-dired
  :ensure t
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  )

(use-package treemacs-persp
  :after (treemacs persp-mode)
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))

#+end_src

** BugHunter
bug hunter for hunting emacs configuration file 

#+begin_src emacs-lisp
(use-package bug-hunter
  :ensure t
  )
#+end_src

** Modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 35      ;; sets modeline height
        doom-modeline-bar-width 5    ;; sets right bar width
        doom-modeline-persp-name t   ;; adds perspective name to modeline
        doom-modeline-persp-icon t)) ;; adds folder icon next to persp name
#+end_src


** Which Key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 6
	which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.8
	which-key-max-description-length 25
	which-key-allow-imprecise-window-fit t
	which-key-separator " â†’ " ))
#+end_src

** Dashboard 

#+begin_src emacs-lisp
;;install dashboard
(use-package dashboard
  :ensure t
  :init
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "emacs rocks")
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-center-content nil)
  (setq dashboard-items '((recents . 5)
                          (projects . 3)
                          (agenda . 3)))
  
  :config
  (dashboard-setup-startup-hook)
  )

#+end_src

** Minibuffer

*** Vertico

#+begin_src emacs-lisp
;;install vertico
(use-package vertico
  :ensure t
  :init
  (vertico-mode)
  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)
  ;; Show more candidates
  (setq vertico-count 20)
  ;; Grow and shrink the Vertico minibuffer
  (setq vertico-resize t)
  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t))
#+end_src


*** MARGINALIA

#+begin_src emacs-lisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :ensure t
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be actived in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src

** Fly Check

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t :config (add-hook 'after-init-hook #'global-flycheck-mode))
#+end_src

** Completion

*** Coruf

Coruf is the completion UI
#+begin_src emacs-lisp
(use-package corfu
  :ensure t
  ;; Optional customizations
  :custom
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-preselect 'prompt) ;; Always preselect the prompt
  ;; Free the RET key for less intrusive behavior.
  ;; Use TAB for cycling, default is `corfu-complete'.

  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))

  :init

  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
					; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
  ;; be used globally (M-/).  See also the customization variable
  ;; `global-corfu-modes' to exclude certain modes.
  :config
  (global-corfu-mode))

(defun corfu-enable-always-in-minibuffer ()
  "Enable Corfu in the minibuffer if Vertico/Mct are not active."
  (unless (or (bound-and-true-p mct--active)
              (bound-and-true-p vertico--input)
              (eq (current-local-map) read-passwd-map))
    ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
    (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                corfu-popupinfo-delay nil)
    (corfu-mode 1)))
(add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)

;; Add extensions
(use-package cape 
  :ensure t
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c p h" . cape-history)
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-elisp-symbol)
         ("C-c p e" . cape-elisp-block)
         ("C-c p a" . cape-abbrev)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p :" . cape-emoji)
         ("C-c p \\" . cape-tex)
         ("C-c p _" . cape-tex)
         ("C-c p ^" . cape-tex)
         ("C-c p &" . cape-sgml)
         ("C-c p r" . cape-rfc1345))
  :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  (add-to-list 'completion-at-point-functions #'cape-history)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-tex)
  (add-to-list 'completion-at-point-functions #'cape-sgml)
  (add-to-list 'completion-at-point-functions #'cape-rfc1345)
  (add-to-list 'completion-at-point-functions #'cape-abbrev)
  (add-to-list 'completion-at-point-functions #'cape-dict)
  (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  (add-to-list 'completion-at-point-functions #'cape-line)
  )

;; Use Dabbrev with Corfu!
(use-package dabbrev
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand))
  :config
  (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
  ;; Since 29.1, use `dabbrev-ignored-buffer-regexps' on older.
  (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
  (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode))

(add-hook 'eshell-mode-hook
          (lambda ()
            (setq-local corfu-auto nil)
            (corfu-mode)))

#+end_src


** Development

*** Eglot

Eglot for Lsp

#+begin_src emacs-lisp
;; (use-package eglot
;;   :ensure t
;;   :defer t
;;   :hook (python-mode . eglot-ensure))

#+end_src

*** Cpp

*** Common Lisp

*** Shell 


*** Debug


** EAF

install [[https://github.com/emacs-eaf/emacs-application-framework][eaf]] fisrt.

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-application-framework/")
(require 'eaf)

;; import eaf-browser
  (require 'eaf-browser)
  (eaf-browser-continue-where-left-off t)
  (eaf-browser-enable-adblocker t)
  (browse-url-browser-function 'eaf-open-browser)


;; import pdf-viewer
  (require 'eaf-pdf-viewer)
 (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
#+end_src

** Terminal 

*** VTerm

** Window Manager

*** EXWM


