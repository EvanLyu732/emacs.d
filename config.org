#+TITLE: Evan's Config Org File
#+AUTHOR: Evan Lyu
#+DESCRIPTION: Evan's Config Org File
#+STARTUP: showeverything
#+OPTIONS: tocs:2

* Table Of Content :toc:
- [[#basic-setting][Basic Setting]]
  - [[#basic-config][Basic Config]]
  - [[#zoom-inout][Zoom In/Out]]
- [[#custom-function][Custom Function]]
- [[#packages][Packages]]
  - [[#using-emacs-china-package-source][Using Emacs China Package Source]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#evil-mode][Evil Mode]]
  - [[#monokai-theme][Monokai Theme]]
  - [[#org-package][Org Package]]
  - [[#general-config][General Config]]
  - [[#which-key][Which Key]]

* Basic Setting 
  
  
** Basic Config
#+begin_src emacs-lisp
(setq inhibit-startup-message t)

;; disable tool bar menu bar scroll bar
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)

;; highlight current line
(global-hl-line-mode t)

;; show line number
(line-number-mode t)

;; auto refresh when configure is updated
(global-auto-revert-mode t)

;; line number mode
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)

#+end_src

** Zoom In/Out
  
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

#+end_src

* Custom Function
  
#+begin_src emacs-lisp

;; reload configuration
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file)
)
#+end_src


* Packages
  
** Using Emacs China Package Source 
   #+begin_src emacs-lisp
(setq package-archives '(("gnu"   . "http://1.15.88.122/gnu/")
                           ("melpa" . "http://1.15.88.122/melpa/")))
   #+end_src
   


** Elpaca Package Manager
#+BEGIN_SRC emacs-lisp
(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                 ,@(when-let ((depth (plist-get order :depth)))
                                                     (list (format "--depth=%d" depth) "--no-single-branch"))
                                                 ,(plist-get order :repo) ,repo))))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Install a package via the elpaca macro
;; See the "recipes" section of the manual for more details.

;; (elpaca example-package)

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable use-package :ensure support for Elpaca.
  (elpaca-use-package-mode))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :ensure t :demand t)
;;(elpaca-wait)

;;Turns off elpaca-use-package-mode current declaration
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
;;(use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
;;(elpaca nil (message "deferred"))
#+END_SRC

** Evil Mode

#+BEGIN_SRC emacs-lisp
;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil 
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)

(setq evil-split-window-below t)
    :ensure t
    :demand nil
    :config
    (evil-mode)
    (setq x-select-enable-clipboard nil)
)
(use-package evil-collection
    :after evil
    :ensure t
    :demand nil 
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))

(use-package evil-commentary
    :after evil
    :ensure t
    :demand nil 
    :config
    (evil-commentary-mode))

(use-package evil-surround
    :after evil
    :ensure t
    :demand nil 
    :config
    (global-evil-surround-mode))

(elpaca-wait)
#+END_SRC

** Monokai Theme 
#+BEGIN_SRC emacs-lisp
(use-package monokai-theme 
    :ensure t
    :config
    (load-theme 'monokai t)
)
#+END_SRC

   
** Org Package

*** Tables Of Contents
#+begin_src emacs-lisp
(use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src
   
*** Org Modern Mode
#+BEGIN_SRC emacs-lisp
(use-package org-modern 
    :ensure t 
    :config 
(add-hook 'org-mode-hook 'org-modern-mode))
#+END_SRC

*** Org Tempo
   #+begin_src emacs-lisp
(require 'org-tempo)
   #+end_src
   

** General Config

   
** Which Key
   #+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
    (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " â†’ " ))
   #+end_src

